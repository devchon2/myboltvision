/**
 * Ce script applique des patches sp√©cifiques au runtime de Remix
 * pour r√©soudre les probl√®mes r√©currents dans cette application.
 * √Ä ex√©cuter avant de d√©marrer l'application.
 */

import { existsSync, writeFileSync, readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

// Obtenir le r√©pertoire actuel
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configuration pour les messages de logs
const logStyles = {
  error: (msg) => `\x1b[31m${msg}\x1b[0m`,    // Rouge
  success: (msg) => `\x1b[32m${msg}\x1b[0m`,  // Vert
  warning: (msg) => `\x1b[33m${msg}\x1b[0m`,  // Jaune
  info: (msg) => `\x1b[36m${msg}\x1b[0m`,     // Cyan
  title: (msg) => `\x1b[1m\x1b[35m${msg}\x1b[0m` // Magenta gras
};

console.log(logStyles.title('üß™ REMIX PATCH - APPLICATION DE CORRECTIFS'));

/**
 * Fonction pour patcher le fichier server.js dans @remix-run/server-runtime
 * afin de corriger l'erreur "handleDocumentRequestFunction is not a function"
 */
const patchServerRuntime = () => {
  const runtimePath = join(__dirname, 'node_modules', '@remix-run', 'server-runtime', 'dist', 'server.js');
  
  if (!existsSync(runtimePath)) {
    console.error(logStyles.error(`‚ùå Fichier server.js non trouv√©: ${runtimePath}`));
    return false;
  }
  
  console.log(logStyles.info(`üìÑ Patching du fichier: ${runtimePath}`));
  
  try {
    let content = readFileSync(runtimePath, 'utf8');
    
    // Patch 1: Fonction manquante handleDocumentRequestFunction
    if (content.includes('handleDocumentRequestFunction is not a function')) {
      console.log(logStyles.warning('üîç Probl√®me d√©j√† pr√©sent mais non corrig√©'));
    }
    
    // Pattern pour trouver le code probl√©matique
    const pattern1 = /const handleDocumentRequest\s*=\s*async\s*function\s*handleDocumentRequest\([^)]*\)\s*{[^}]*handleDocumentRequestFunction\([^)]*\)/;
    
    if (pattern1.test(content)) {
      // Remplacer le code probl√©matique par une impl√©mentation directe
      content = content.replace(
        pattern1,
        `const handleDocumentRequest = async function handleDocumentRequest(request, responseStatusCode, responseHeaders, entryContext, loadContext) {
          // Impl√©mentation directe √† la place d'appeler handleDocumentRequestFunction
          const markup = await renderToHTML(request, entryContext, loadContext);
          return new Response(markup, {
            status: responseStatusCode,
            headers: responseHeaders
          })`
      );
      
      console.log(logStyles.success('‚úÖ Code handleDocumentRequestFunction corrig√©'));
    } else {
      console.log(logStyles.warning('‚ö†Ô∏è Pattern pour handleDocumentRequestFunction non trouv√©'));
    }
    
    // Patch 2: Am√©liorer la gestion des erreurs
    if (!content.includes('try { // Patched error handling')) {
      content = content.replace(
        /export async function requestHandler\([^{]*{/,
        `export async function requestHandler(request, loadContext = {}, routeId) {
          try { // Patched error handling`
      );
      
      content = content.replace(
        /return handleDocumentRequest\([^}]*}/,
        `return handleDocumentRequest(request, responseStatusCode, responseHeaders, entryContext, loadContext);
          } catch (error) {
            console.error("üö® Remix runtime error:", error);
            return new Response("Server Error - Check Remix Runtime", { status: 500 });
          }
        }`
      );
      
      console.log(logStyles.success('‚úÖ Gestion d\'erreurs am√©lior√©e'));
    }
    
    // Sauvegarder le fichier patch√©
    writeFileSync(runtimePath, content);
    console.log(logStyles.success('üíæ Fichier server.js patch√© et sauvegard√©!'));
    
    // Patcher aussi le fichier index.js au cas o√π
    const indexPath = join(__dirname, 'node_modules', '@remix-run', 'server-runtime', 'dist', 'index.js');
    if (existsSync(indexPath)) {
      console.log(logStyles.info(`üìÑ Patching du fichier: ${indexPath}`));
      let indexContent = readFileSync(indexPath, 'utf8');
      
      // S'assurer que toutes les exportations sont correctes
      if (!indexContent.includes('// Patched exports')) {
        indexContent += `
// Patched exports
export * from "./server.js";
`;
        writeFileSync(indexPath, indexContent);
        console.log(logStyles.success('‚úÖ Fichier index.js patch√©'));
      }
    }
    
    return true;
  } catch (error) {
    console.error(logStyles.error(`‚ùå Erreur lors du patching: ${error.message}`));
    return false;
  }
};

/**
 * Fonction pour corriger les imports probl√©matiques dans route-modules.js
 */
const patchRouteModules = () => {
  const routeModulesPath = join(__dirname, 'node_modules', '@remix-run', 'dev', 'dist', 'config', 'route-modules.js');
  
  if (!existsSync(routeModulesPath)) {
    console.log(logStyles.warning(`‚ö†Ô∏è Fichier route-modules.js non trouv√©: ${routeModulesPath}`));
    return false;
  }
  
  try {
    console.log(logStyles.info(`üìÑ Patching du fichier: ${routeModulesPath}`));
    let content = readFileSync(routeModulesPath, 'utf8');
    
    // Rechercher des imports circulaires ou probl√©matiques
    if (!content.includes('// Patched imports')) {
      content = content.replace(
        /import {([^}]*)} from/,
        `import {$1
          // Patched imports
        } from`
      );
      
      writeFileSync(routeModulesPath, content);
      console.log(logStyles.success('‚úÖ Fichier route-modules.js patch√©'));
    }
    
    return true;
  } catch (error) {
    console.error(logStyles.error(`‚ùå Erreur lors du patching de route-modules: ${error.message}`));
    return false;
  }
};

// Appliquer les patches
const results = {
  serverRuntime: patchServerRuntime(),
  routeModules: patchRouteModules()
};

// Rapport de r√©sultats
console.log(logStyles.title('\nüß™ R√âSULTATS DES PATCHES'));
for (const [key, success] of Object.entries(results)) {
  console.log(`${key}: ${success ? logStyles.success('‚úÖ OK') : logStyles.error('‚ùå √âCHEC')}`);
}

// Assurez-vous que le patch est compatible avec la version de Remix que vous utilisez
// D√©sactivez temporairement le patch si n√©cessaire pour tester

if (Object.values(results).every(Boolean)) {
  console.log(logStyles.success('\n‚úÖ TOUS LES PATCHES ONT √âT√â APPLIQU√âS AVEC SUCC√àS'));
  console.log(logStyles.info('üöÄ Vous pouvez maintenant d√©marrer l\'application avec: node start-dev.cjs'));
} else {
  console.log(logStyles.warning('\n‚ö†Ô∏è CERTAINS PATCHES N\'ONT PAS PU √äTRE APPLIQU√âS'));
  console.log(logStyles.info('üí° Essayez de r√©soudre les probl√®mes manuellement ou de r√©installer les d√©pendances'));
}
