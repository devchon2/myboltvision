/**
 * Solution robuste pour r√©soudre les probl√®mes de Remix
 * sans supprimer les modules existants
 * 
 * Ce script corrige la configuration de l'application
 * et effectue des patches cibl√©s pour √©viter les erreurs
 * de "handleDocumentRequestFunction is not a function"
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration pour les logs
const styles = {
  error: '\x1b[31m%s\x1b[0m',    // Rouge
  success: '\x1b[32m%s\x1b[0m',  // Vert
  warning: '\x1b[33m%s\x1b[0m',  // Jaune
  info: '\x1b[36m%s\x1b[0m',     // Cyan
  title: '\x1b[1m\x1b[35m%s\x1b[0m' // Magenta gras
};

// Afficher l'en-t√™te
console.log(styles.title, '\n‚òÖ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚òÖ');
console.log(styles.title, '         SOLUTION REMIX STABLE          ');
console.log(styles.title, '          ‚ö° CORRECTIF S√õRE ‚ö°          ');
console.log(styles.title, '‚òÖ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚òÖ\n');

// Fonction pour ex√©cuter les commandes avec gestion d'erreur
const execCommand = (cmd, options = {}) => {
  try {
    return execSync(cmd, { encoding: 'utf8', ...options });
  } catch (error) {
    console.log(styles.error, `Erreur lors de l'ex√©cution de la commande: ${cmd}`);
    console.log(styles.error, error.message);
    return null;
  }
};

// 1. V√©rifier les scripts de d√©marrage et les mettre √† jour
const updateScripts = () => {
  console.log(styles.info, '1Ô∏è‚É£ Mise √† jour des scripts de d√©marrage...');
  
  try {
    const packageJsonPath = path.join(__dirname, 'package.json');
    const packageJson = require(packageJsonPath);
    
    let modified = false;
    
    // Ajouter un script de d√©marrage s√©curis√©
    if (!packageJson.scripts.devSafe) {
      packageJson.scripts.devSafe = 'node start-dev.cjs';
      modified = true;
      console.log('   ‚úì Script "devSafe" ajout√©');
    }
    
    // Ajouter un script de pr√©paration
    if (!packageJson.scripts.prepare) {
      packageJson.scripts.prepare = 'node pre-start.cjs && node module-polyfill.cjs';
      modified = true;
      console.log('   ‚úì Script "prepare" ajout√©');
    }
    
    // Sauvegarder les modifications si n√©cessaire
    if (modified) {
      fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
      console.log(styles.success, '   ‚úì Fichier package.json mis √† jour');
    } else {
      console.log('   ‚Ñπ Aucune modification n√©cessaire pour les scripts');
    }
    
    return true;
  } catch (error) {
    console.log(styles.error, `   ‚ùå Erreur lors de la mise √† jour des scripts: ${error.message}`);
    return false;
  }
};

// 2. V√©rifier et cr√©er le module-polyfill.js (pour le code client)
const createClientPolyfill = () => {
  console.log(styles.info, '2Ô∏è‚É£ Cr√©ation du polyfill pour le client...');
  
  try {
    const polyfillPath = path.join(__dirname, 'remix-client-polyfill.js');
    const polyfillContent = `/**
 * Polyfill client-side pour les fonctionnalit√©s manquantes
 * dans l'environnement du navigateur
 */

// D√©finir module si non d√©fini
if (typeof window !== 'undefined' && !window.module) {
  window.module = { exports: {} };
  console.log('‚úì Window module polyfill install√©');
}

// Polyfill pour Remix loader
if (typeof window !== 'undefined' && !window.__remix_loader_stack) {
  window.__remix_loader_stack = [];
  console.log('‚úì Window __remix_loader_stack polyfill install√©');
}

// Polyfill minimal pour path (utilis√© par certains modules)
if (typeof window !== 'undefined' && !window.path) {
  window.path = {
    join: (...segments) => segments.join('/').replace(/\\/+/g, '/'),
    resolve: (...segments) => segments.join('/').replace(/\\/+/g, '/'),
    dirname: (p) => p.substring(0, p.lastIndexOf('/') + 1),
    basename: (p) => p.substring(p.lastIndexOf('/') + 1)
  };
  console.log('‚úì Window path polyfill install√©');
}

// Exporter tout pour pouvoir l'utiliser comme module
export default {
  module: window.module,
  __remix_loader_stack: window.__remix_loader_stack,
  path: window.path
};
`;
    
    // √âcrire le fichier s'il n'existe pas
    if (!fs.existsSync(polyfillPath)) {
      fs.writeFileSync(polyfillPath, polyfillContent);
      console.log(styles.success, '   ‚úì Fichier remix-client-polyfill.js cr√©√©');
    } else {
      console.log('   ‚Ñπ Le fichier remix-client-polyfill.js existe d√©j√†');
    }
    
    return true;
  } catch (error) {
    console.log(styles.error, `   ‚ùå Erreur lors de la cr√©ation du polyfill client: ${error.message}`);
    return false;
  }
};

// 3. Cr√©er un script de lancement direct
const createDirectLaunchScript = () => {
  console.log(styles.info, '3Ô∏è‚É£ Cr√©ation d\'un script de lancement direct...');
  
  try {
    const launchPath = path.join(__dirname, 'launch.cjs');
    const launchContent = `/**
 * Script de lancement direct qui contourne les probl√®mes de l'application
 */

const { execSync, spawn } = require('child_process');
const path = require('path');

// D√©finir les polyfills globaux n√©cessaires
global.module = global.module || { exports: {} };
global.__remix_loader_stack = global.__remix_loader_stack || [];

console.log('\\n‚òÖ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚òÖ');
console.log('       MYBOLTVISION - LANCEMENT DIRECT    ');
console.log('          ‚ö°Ô∏è  D√©marrage  ‚ö°Ô∏è         ');
console.log('‚òÖ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚òÖ\\n');

// Ex√©cuter la s√©quence de d√©marrage
console.log('1. Initialisation de l\\'environnement...');
execSync('node pre-start.cjs', { stdio: 'inherit' });

console.log('\\n2. Application des polyfills...');
execSync('node module-polyfill.cjs', { stdio: 'inherit' });

console.log('\\n3. D√©marrage du serveur de d√©veloppement...');
// Lancer Vite directement
const viteProcess = spawn('npx', ['vite'], { stdio: 'inherit', shell: true });

// G√©rer la sortie propre
process.on('SIGINT', () => {
  console.log('\\nüëã Arr√™t de l\\'application...');
  viteProcess.kill();
  process.exit(0);
});

viteProcess.on('exit', (code) => {
  console.log(\`\\nüõë Le serveur s'est arr√™t√© avec le code: \${code}\`);
  process.exit(code);
});
`;
    
    // √âcrire le fichier s'il n'existe pas
    if (!fs.existsSync(launchPath)) {
      fs.writeFileSync(launchPath, launchContent);
      console.log(styles.success, '   ‚úì Fichier launch.cjs cr√©√©');
    } else {
      console.log('   ‚Ñπ Le fichier launch.cjs existe d√©j√†');
    }
    
    return true;
  } catch (error) {
    console.log(styles.error, `   ‚ùå Erreur lors de la cr√©ation du script de lancement: ${error.message}`);
    return false;
  }
};

// 4. Modifier vite.config.ts pour ajouter un plugin de correction
const updateViteConfig = () => {
  console.log(styles.info, '4Ô∏è‚É£ Mise √† jour de la configuration Vite...');
  
  try {
    const viteConfigPath = path.join(__dirname, 'vite.config.ts');
    let viteConfig = fs.readFileSync(viteConfigPath, 'utf8');
    
    // V√©rifier si notre plugin de correction est d√©j√† pr√©sent
    if (!viteConfig.includes('handleDocumentRequestPatchPlugin')) {
      // Chercher la section plugins
      const pluginsIndex = viteConfig.indexOf('plugins: [');
      
      if (pluginsIndex !== -1) {
        // D√©terminer l'indentation
        const indent = '  '; // Indentation par d√©faut
        
        // Plugin de correction pour handleDocumentRequest
        const patchPlugin = `
  // Patch pour handleDocumentRequestFunction
  {
    name: 'handleDocumentRequestPatchPlugin',
    enforce: 'pre',
    apply: 'serve',
    transform(code, id) {
      // Patcher uniquement le fichier server.js dans @remix-run/server-runtime
      if (id.includes('@remix-run/server-runtime') && id.endsWith('server.js')) {
        console.log('üìÑ Patching server.js dans @remix-run/server-runtime');
        
        // Corriger les appels probl√©matiques
        return code
          .replace(
            /const handleDocumentRequest\\s*=\\s*async\\s*function\\s*handleDocumentRequest\\([^)]*\\)\\s*{[^}]*handleDocumentRequestFunction\\([^)]*\\)/g,
            \`const handleDocumentRequest = async function handleDocumentRequest(request, responseStatusCode, responseHeaders, entryContext, loadContext) {
              // Fix direct: ne pas utiliser handleDocumentRequestFunction
              try {
                const markup = await renderToHTML(request, entryContext, loadContext);
                return new Response(markup, {
                  status: responseStatusCode,
                  headers: responseHeaders
                });
              } catch (error) {
                console.error("Error in handleDocumentRequest:", error);
                return new Response("Server Error", { status: 500 });
              }\`
          )
          .replace(
            /export async function requestHandler\\([^{]*{/,
            \`export async function requestHandler(request, loadContext = {}, routeId) {
              try { // Patched error handling\`
          )
          .replace(
            /return handleDocumentRequest\\([^}]*}/,
            \`return handleDocumentRequest(request, responseStatusCode, responseHeaders, entryContext, loadContext);
              } catch (error) {
                console.error("Remix runtime error:", error);
                return new Response("Server Error", { status: 500 });
              }
            }\`
          );
      }
      return null;
    }
  },`;
        
        // Ins√©rer notre plugin au d√©but de la liste des plugins
        viteConfig = viteConfig.slice(0, pluginsIndex + 10) + patchPlugin + viteConfig.slice(pluginsIndex + 10);
        
        // Sauvegarder le fichier modifi√©
        fs.writeFileSync(viteConfigPath, viteConfig);
        console.log(styles.success, '   ‚úì Plugin de correction ajout√© √† vite.config.ts');
      } else {
        console.log(styles.warning, '   ‚ö†Ô∏è Section plugins non trouv√©e dans vite.config.ts');
      }
    } else {
      console.log('   ‚Ñπ Le plugin de correction est d√©j√† pr√©sent dans vite.config.ts');
    }
    
    return true;
  } catch (error) {
    console.log(styles.error, `   ‚ùå Erreur lors de la mise √† jour de vite.config.ts: ${error.message}`);
    return false;
  }
};

// Ex√©cuter les √©tapes
const results = {
  updateScripts: updateScripts(),
  createClientPolyfill: createClientPolyfill(),
  createDirectLaunchScript: createDirectLaunchScript(),
  updateViteConfig: updateViteConfig()
};

// Afficher le r√©sum√©
console.log(styles.title, '\n‚òÖ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê R√âSULTATS ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚òÖ');

let allSuccess = true;
for (const [step, success] of Object.entries(results)) {
  console.log(`${step}: ${success ? styles.success : styles.error}`, success ? '‚úÖ OK' : '‚ùå √âCHEC');
  if (!success) allSuccess = false;
}

// Instructions finales
console.log(styles.title, '\n‚òÖ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê PROCHAINES √âTAPES ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚òÖ');
console.log(styles.info, '1. D√©marrez l\'application avec l\'une des commandes suivantes:');
console.log('   ‚Ä¢ node launch.cjs (m√©thode recommand√©e)');
console.log('   ‚Ä¢ npm run devSafe');
console.log(styles.info, '2. Si des erreurs persistent, essayez de lancer:');
console.log('   ‚Ä¢ node debug-loader.cjs');
console.log(styles.info, '3. Si le probl√®me persiste, utilisez une approche alternative:');
console.log('   ‚Ä¢ Remplacez vos versions de @remix-run par celles d\'une version ant√©rieure');
console.log('   ‚Ä¢ Essayez d\'utiliser pnpm au lieu de npm pour g√©rer les d√©pendances');
