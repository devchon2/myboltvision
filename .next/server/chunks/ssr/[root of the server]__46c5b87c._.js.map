{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://D%3A/IA/Applications%20IA/myboltvision/components/auth/AuthContext.tsx"],"sourcesContent":["'use client';\nimport React, { createContext, useContext, useState, useEffect, type ReactNode } from 'react';\n\n// Types définis pour l'interface utilisateur et le contexte d'authentification\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n  resetPassword: (email: string) => Promise<void>;\n}\n\n// Valeur par défaut du contexte\nconst defaultContext: AuthContextType = {\n  user: null,\n  isLoading: false,\n  error: null,\n  login: async () => {},\n  register: async () => {},\n  logout: () => {},\n  resetPassword: async () => {},\n};\n\n// Création du contexte\nconst AuthContext = createContext<AuthContextType>(defaultContext);\n\n// Hook personnalisé pour utiliser le contexte d'authentification\nexport const useAuth = () => useContext(AuthContext);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n// Fournisseur du contexte d'authentification\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Vérifier si l'utilisateur est déjà authentifié\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        // Vérifier le localStorage pour une authentification précédente\n        const isAuth = localStorage.getItem('isAuthenticated');\n\n        if (isAuth === 'true') {\n          // Simulation d'un utilisateur connecté\n          setUser({\n            id: '1',\n            email: 'utilisateur@exemple.com',\n            name: 'Utilisateur Test',\n          });\n        }\n      } catch (err) {\n        console.error(\"Erreur lors de la vérification de l'authentification:\", err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  // Fonction de connexion\n  const login = async (email: string, password: string) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Simulation d'une API de connexion\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      // Vérification simplifiée (à remplacer par votre logique réelle)\n      if (email && password) {\n        // Simulation d'un utilisateur connecté\n        const loggedUser = {\n          id: '1',\n          email,\n          name: email.split('@')[0], // Utilise la partie avant @ comme nom temporaire\n        };\n\n        setUser(loggedUser);\n        localStorage.setItem('isAuthenticated', 'true');\n      } else {\n        throw new Error('Email et mot de passe requis');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Erreur lors de la connexion');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fonction d'inscription\n  const register = async (name: string, email: string, password: string) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Simulation d'une API d'inscription\n      await new Promise((resolve) => setTimeout(resolve, 1500));\n\n      // Vérification simplifiée (à remplacer par votre logique réelle)\n      if (name && email && password) {\n        // Simulation d'un utilisateur inscrit et connecté\n        const newUser = {\n          id: '1',\n          email,\n          name,\n        };\n\n        setUser(newUser);\n        localStorage.setItem('isAuthenticated', 'true');\n      } else {\n        throw new Error('Tous les champs sont requis');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Erreur lors de l'inscription\");\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fonction de déconnexion\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('isAuthenticated');\n  };\n\n  // Fonction de réinitialisation du mot de passe\n  const resetPassword = async (email: string) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Simulation d'une API de réinitialisation\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      // Vérification simplifiée (à remplacer par votre logique réelle)\n      if (!email) {\n        throw new Error('Email requis');\n      }\n\n      // Succès simulé\n      return;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Erreur lors de la réinitialisation');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Valeur du contexte\n  const value = {\n    user,\n    isLoading,\n    error,\n    login,\n    register,\n    logout,\n    resetPassword,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"names":[],"mappings":"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","debugId":null}}]
}