(()=>{var e={};e.id=437,e.ids=[437],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},30214:()=>{},31421:e=>{"use strict";e.exports=require("node:child_process")},38462:()=>{},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},83580:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>y,routeModule:()=>d,serverHooks:()=>b,workAsyncStorage:()=>h,workUnitAsyncStorage:()=>f});var s={};r.r(s),r.d(s,{GET:()=>u,POST:()=>g});var a=r(18684),i=r(26561),o=r(14488),n=r(31421);let l=require("node:util");var c=r(61749);let p=(0,l.promisify)(n.exec);async function u(){return c.NextResponse.json({})}async function g(e){try{let t=await e.json();if(!t||"object"!=typeof t||!("branch"in t)||"string"!=typeof t.branch)return c.NextResponse.json({error:"Invalid request body: branch is required and must be a string"},{status:400});let{branch:r,autoUpdate:s=!1}=t,a=new ReadableStream({async start(e){let t=new TextEncoder,a=r=>{e.enqueue(t.encode(JSON.stringify(r)+"\n"))};try{a({stage:"fetch",message:"Checking repository status...",progress:0});let e=r||"main";try{await p("git remote get-url upstream"),a({stage:"fetch",message:"Repository remote verified",progress:10})}catch{throw Error("No upstream repository found. Please set up the upstream repository first by running:\ngit remote add upstream https://github.com/stackblitz-labs/bolt.diy.git")}if(!r){a({stage:"fetch",message:"Detecting default branch...",progress:20});try{let{stdout:t}=await p('git remote show upstream | grep "HEAD branch" | cut -d" " -f5');e=t.trim()||"main",a({stage:"fetch",message:`Using branch: ${e}`,progress:30})}catch{e="main",a({stage:"fetch",message:"Using default branch: main",progress:30})}}a({stage:"fetch",message:"Fetching latest changes...",progress:40}),await p("git fetch --all"),a({stage:"fetch",message:"Remote changes fetched",progress:50});try{await p(`git rev-parse --verify upstream/${e}`),a({stage:"fetch",message:"Remote branch verified",progress:60})}catch{throw Error(`Remote branch 'upstream/${e}' not found. Please ensure the upstream repository is properly configured.`)}a({stage:"fetch",message:"Comparing versions...",progress:70});let{stdout:t}=await p("git rev-parse HEAD"),{stdout:i}=await p(`git rev-parse upstream/${e}`);if(t.trim()===i.trim()){a({stage:"complete",message:"No updates available. You are on the latest version.",progress:100,details:{currentCommit:t.trim().substring(0,7),remoteCommit:i.trim().substring(0,7)}});return}a({stage:"fetch",message:"Analyzing changes...",progress:80});let o=[],n=[],l=null,c=0,u=e=>{if(0===e)return"0 B";let t=Math.floor(Math.log(e)/Math.log(1024));return`${parseFloat((e/Math.pow(1024,t)).toFixed(2))} ${["B","KB","MB","GB"][t]}`};try{let{stdout:r}=await p(`git diff --name-status ${t.trim()}..${i.trim()}`),s=r.split("\n").filter(Boolean);if(0===s.length){a({stage:"complete",message:`No file changes detected between your version and upstream/${e}. You might be on a different branch.`,progress:100,details:{currentCommit:t.trim().substring(0,7),remoteCommit:i.trim().substring(0,7)}});return}for(let e of(a({stage:"fetch",message:`Found ${s.length} changed files, calculating sizes...`,progress:90}),s)){let[t,r]=e.split("	");if("D"!==t)try{let{stdout:e}=await p(`git cat-file -s ${i.trim()}:${r}`),t=parseInt(e)||0;c+=t}catch{console.debug(`Could not get size for file: ${r}`)}}o=s.map(e=>{let[t,r]=e.split("	");return`${"M"===t?"Modified":"A"===t?"Added":"Deleted"}: ${r}`})}catch(t){throw console.debug("Failed to get changed files:",t),Error(`Failed to compare changes with upstream/${e}. Are you on the correct branch?`)}try{let{stdout:e}=await p(`git log --pretty=format:"%h|%s|%aI" ${t.trim()}..${i.trim()}`),r=e.split("\n").filter(Boolean).map(e=>{let[t,r,s]=e.split("|"),a="other",i=r;return r.startsWith("feat:")||r.startsWith("feature:")?(a="feature",i=r.replace(/^feat(?:ure)?:/,"").trim()):r.startsWith("fix:")?(a="fix",i=r.replace(/^fix:/,"").trim()):r.startsWith("docs:")?(a="docs",i=r.replace(/^docs:/,"").trim()):r.startsWith("style:")?(a="style",i=r.replace(/^style:/,"").trim()):r.startsWith("refactor:")?(a="refactor",i=r.replace(/^refactor:/,"").trim()):r.startsWith("perf:")?(a="perf",i=r.replace(/^perf:/,"").trim()):r.startsWith("test:")?(a="test",i=r.replace(/^test:/,"").trim()):r.startsWith("build:")?(a="build",i=r.replace(/^build:/,"").trim()):r.startsWith("ci:")&&(a="ci",i=r.replace(/^ci:/,"").trim()),{hash:t,type:a,message:i,timestamp:new Date(s)}}).reduce((e,t)=>(e[t.type]||(e[t.type]=[]),e[t.type].push(t),e),{}),s={feature:"✨",fix:"\uD83D\uDC1B",docs:"\uD83D\uDCDA",style:"\uD83D\uDC8E",refactor:"♻️",perf:"⚡",test:"\uD83E\uDDEA",build:"\uD83D\uDEE0️",ci:"⚙️",other:"\uD83D\uDD0D"},a={feature:"Features",fix:"Bug Fixes",docs:"Documentation",style:"Styles",refactor:"Code Refactoring",perf:"Performance",test:"Tests",build:"Build",ci:"CI",other:"Other Changes"};n=Object.entries(r).map(([e,t])=>{let r=s[e]||s.other,i=a[e]||a.other;return`### ${r} ${i}

${t.map(e=>`* ${e.message} (${e.hash.substring(0,7)}) - ${e.timestamp.toLocaleString()}`).join("\n")}`})}catch{}try{let{stdout:e}=await p(`git diff --shortstat ${t.trim()}..${i.trim()}`);l=e.match(/(\d+) files? changed(?:, (\d+) insertions?\\(\\+\\))?(?:, (\d+) deletions?\\(-\\))?/)}catch{}if(!l&&0===o.length){a({stage:"complete",message:`No changes detected between your version and upstream/${e}. This might be unexpected - please check your git status.`,progress:100});return}a({stage:"fetch",message:"Fetching changelog...",progress:95});let g=await m(t.trim(),i.trim());if(a({stage:"fetch",message:`Changes detected on upstream/${e}`,progress:100,details:{changedFiles:o,additions:l?.[2]?parseInt(l[2]):0,deletions:l?.[3]?parseInt(l[3]):0,commitMessages:n,totalSize:u(c),currentCommit:t.trim().substring(0,7),remoteCommit:i.trim().substring(0,7),updateReady:!0,changelog:g,compareUrl:`https://github.com/stackblitz-labs/bolt.diy/compare/${t.trim().substring(0,7)}...${i.trim().substring(0,7)}`}}),!s){a({stage:"complete",message:'Update is ready to be applied. Click "Update Now" to proceed.',progress:100,details:{changedFiles:o,additions:l?.[2]?parseInt(l[2]):0,deletions:l?.[3]?parseInt(l[3]):0,commitMessages:n,totalSize:u(c),currentCommit:t.trim().substring(0,7),remoteCommit:i.trim().substring(0,7),updateReady:!0,changelog:g,compareUrl:`https://github.com/stackblitz-labs/bolt.diy/compare/${t.trim().substring(0,7)}...${i.trim().substring(0,7)}`}});return}a({stage:"pull",message:`Pulling changes from upstream/${e}...`,progress:0}),await p(`git pull upstream ${e}`),a({stage:"pull",message:"Changes pulled successfully",progress:100}),a({stage:"install",message:"Installing dependencies...",progress:0}),await p("pnpm install"),a({stage:"install",message:"Dependencies installed successfully",progress:100}),a({stage:"build",message:"Building application...",progress:0}),await p("pnpm build"),a({stage:"build",message:"Build completed successfully",progress:100}),a({stage:"complete",message:"Update completed successfully! Click Restart to apply changes.",progress:100})}catch(e){a({stage:"complete",message:"Update failed",error:e instanceof Error?e.message:"Unknown error occurred"})}finally{e.close()}}});return new Response(a,{headers:{"Content-Type":"text/event-stream","Cache-Control":"no-cache",Connection:"keep-alive"}})}catch(e){return console.error("Update preparation failed:",e),c.NextResponse.json({success:!1,error:e instanceof Error?e.message:"Unknown error occurred while preparing update"},{status:500})}}async function m(e,t){try{let{stdout:r}=await p("git show upstream/main:changelog.md");if(r)return r;let s="# Changes in this Update\n\n",{stdout:a}=await p(`git log --pretty=format:"%h|%s|%b" ${e.trim()}..${t.trim()}`),i=a.split("\n").filter(Boolean),o={"✨ Features":[],"\uD83D\uDC1B Bug Fixes":[],"\uD83D\uDCDA Documentation":[],"\uD83D\uDC8E Styles":[],"♻️ Code Refactoring":[],"⚡ Performance":[],"\uD83E\uDDEA Tests":[],"\uD83D\uDEE0️ Build":[],"⚙️ CI":[],"\uD83D\uDD0D Other Changes":[]};for(let e of i){let[t,r]=e.split("|"),s="\uD83D\uDD0D Other Changes";r.startsWith("feat:")||r.startsWith("feature:")?s="✨ Features":r.startsWith("fix:")?s="\uD83D\uDC1B Bug Fixes":r.startsWith("docs:")?s="\uD83D\uDCDA Documentation":r.startsWith("style:")?s="\uD83D\uDC8E Styles":r.startsWith("refactor:")?s="♻️ Code Refactoring":r.startsWith("perf:")?s="⚡ Performance":r.startsWith("test:")?s="\uD83E\uDDEA Tests":r.startsWith("build:")?s="\uD83D\uDEE0️ Build":r.startsWith("ci:")&&(s="⚙️ CI");let a=r.includes(":")?r.split(":")[1].trim():r.trim();o[s].push(`* ${a} (${t.substring(0,7)})`)}for(let[e,t]of Object.entries(o))t.length>0&&(s+=`
## ${e}

${t.join("\n")}
`);let{stdout:n}=await p(`git diff --shortstat ${e.trim()}..${t.trim()}`);return n&&(s+=`
## 📊 Stats

${n.trim()}
`),s}catch(e){return console.error("Error fetching changelog:",e),"Unable to fetch changelog"}}let d=new a.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/update/route",pathname:"/api/update",filename:"route",bundlePath:"app/api/update/route"},resolvedPagePath:"D:\\IA\\Applications IA\\myboltvision\\app\\api\\update\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:h,workUnitAsyncStorage:f,serverHooks:b}=d;function y(){return(0,o.patchFetch)({workAsyncStorage:h,workUnitAsyncStorage:f})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[488,107],()=>r(83580));module.exports=s})();