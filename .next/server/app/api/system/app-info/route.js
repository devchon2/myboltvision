(()=>{var e={};e.id=414,e.ids=[414],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},30214:()=>{},31421:e=>{"use strict";e.exports=require("node:child_process")},34875:(e,n,r)=>{"use strict";r.r(n),r.d(n,{patchFetch:()=>x,routeModule:()=>g,serverHooks:()=>S,workAsyncStorage:()=>_,workUnitAsyncStorage:()=>E});var t={};r.r(t),r.d(t,{GET:()=>d,POST:()=>l});var o=r(18684),i=r(26561),s=r(14488),a=r(31421),p=r(61749);let c=()=>{try{return{commitHash:(0,a.execSync)("git rev-parse --short HEAD").toString().trim(),branch:(0,a.execSync)("git rev-parse --abbrev-ref HEAD").toString().trim(),commitTime:(0,a.execSync)("git log -1 --format=%cd").toString().trim(),author:(0,a.execSync)("git log -1 --format=%an").toString().trim(),email:(0,a.execSync)("git log -1 --format=%ae").toString().trim(),remoteUrl:(0,a.execSync)("git config --get remote.origin.url").toString().trim(),repoName:(0,a.execSync)("git config --get remote.origin.url").toString().trim().replace(/^.*github.com[:/]/,"").replace(/\.git$/,"")}}catch(e){return console.error("Failed to get git info:",e),{commitHash:"unknown",branch:"unknown",commitTime:"unknown",author:"unknown",email:"unknown",remoteUrl:"unknown",repoName:"unknown"}}},u=(e,n)=>Object.entries(e||{}).map(([e,r])=>({name:e,version:r.replace(/^\^|~/,""),type:n})),m=()=>{let e=c();return{name:__PKG_NAME||process.env.NEXT_PUBLIC_APP_NAME||"bolt.diy",version:__APP_VERSION||process.env.NEXT_PUBLIC_APP_VERSION||"0.1.0",description:__PKG_DESCRIPTION||"A DIY LLM interface",license:__PKG_LICENSE||"MIT",environment:"production",gitInfo:e,timestamp:new Date().toISOString(),runtimeInfo:{nodeVersion:process.version||"unknown",nextVersion:process.env.NEXT_PUBLIC_NEXT_VERSION||"unknown"},dependencies:{production:u(__PKG_DEPENDENCIES,"production"),development:u(__PKG_DEV_DEPENDENCIES,"development"),peer:u(__PKG_PEER_DEPENDENCIES,"peer"),optional:u(__PKG_OPTIONAL_DEPENDENCIES,"optional")}}};async function d(){try{return p.NextResponse.json(m())}catch(e){return console.error("Failed to get webapp info:",e),p.NextResponse.json({name:"bolt.diy",version:"0.0.0",description:"Error fetching app info",license:"MIT",environment:"error",gitInfo:{commitHash:"error",branch:"unknown",commitTime:"unknown",author:"unknown",email:"unknown",remoteUrl:"unknown",repoName:"unknown"},timestamp:new Date().toISOString(),runtimeInfo:{nodeVersion:"unknown",nextVersion:"unknown"},dependencies:{production:[],development:[],peer:[],optional:[]}},{status:500})}}async function l(){return d()}let g=new o.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/system/app-info/route",pathname:"/api/system/app-info",filename:"route",bundlePath:"app/api/system/app-info/route"},resolvedPagePath:"D:\\IA\\Applications IA\\myboltvision\\app\\api\\system\\app-info\\route.ts",nextConfigOutput:"",userland:t}),{workAsyncStorage:_,workUnitAsyncStorage:E,serverHooks:S}=g;function x(){return(0,s.patchFetch)({workAsyncStorage:_,workUnitAsyncStorage:E})}},38462:()=>{},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")}};var n=require("../../../../webpack-runtime.js");n.C(e);var r=e=>n(n.s=e),t=n.X(0,[488,107],()=>r(34875));module.exports=t})();