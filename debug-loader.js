/**
 * Ce fichier aide √† r√©soudre les probl√®mes de loader Remix
 * en fournissant un outil de diagnostic et de correction
 * pour les erreurs courantes li√©es aux loaders
 */

// Configuration pour les messages de logs clairs
const styles = {
  error: '\x1b[31m%s\x1b[0m', // Rouge
  success: '\x1b[32m%s\x1b[0m', // Vert
  warning: '\x1b[33m%s\x1b[0m', // Jaune
  info: '\x1b[36m%s\x1b[0m', // Cyan
  title: '\x1b[1m\x1b[35m%s\x1b[0m', // Magenta gras
};

console.log(styles.title, 'üõ†Ô∏è  DIAGNOSTIC DU LOADER REMIX üõ†Ô∏è');

// V√©rifier les variables d'environnement pertinentes
const checkEnv = () => {
  console.log(styles.info, "‚úì V√©rification des variables d'environnement...");
  console.log('  NODE_ENV:', process.env.NODE_ENV || 'non d√©fini');
};

// V√©rifier les versions des packages Remix et d√©pendances
const checkVersions = () => {
  console.log(styles.info, '‚úì V√©rification des versions...');

  try {
    const packageJson = require('./package.json');

    // V√©rification des r√©solutions
    const resolutions = packageJson.resolutions || {};
    console.log('  R√©solutions:');
    ['@remix-run/react', '@remix-run/dev', '@remix-run/server-runtime', '@remix-run/cloudflare'].forEach((pkg) => {
      console.log(`    ${pkg}: ${resolutions[pkg] || 'non sp√©cifi√©'}`);
    });

    // V√©rification des d√©pendances
    const dependencies = packageJson.dependencies || {};
    console.log('  D√©pendances:');
    ['@remix-run/react', '@remix-run/dev', '@remix-run/server-runtime', '@remix-run/cloudflare'].forEach((pkg) => {
      console.log(`    ${pkg}: ${dependencies[pkg] || 'non sp√©cifi√©'}`);
    });

    // V√©rification des devDependencies
    const devDependencies = packageJson.devDependencies || {};
    console.log('  DevD√©pendances:');
    ['@remix-run/react', '@remix-run/dev', '@remix-run/server-runtime', '@remix-run/cloudflare'].forEach((pkg) => {
      console.log(`    ${pkg}: ${devDependencies[pkg] || 'non sp√©cifi√©'}`);
    });
  } catch (error) {
    console.log(styles.error, '‚ùå Erreur lors de la lecture du package.json:', error.message);
  }
};

// V√©rifier la configuration de Remix
const checkRemixConfig = () => {
  console.log(styles.info, '‚úì V√©rification de la configuration Remix...');

  try {
    const remixConfig = require('./remix.config.js');
    console.log('  Configuration Remix:');
    console.log('    serverModuleFormat:', remixConfig.serverModuleFormat);
    console.log('    future flags:', JSON.stringify(remixConfig.future, null, 2));
  } catch (error) {
    console.log(styles.error, '‚ùå Erreur lors de la lecture de remix.config.js:', error.message);
  }
};

// V√©rifier les routes disponibles
const checkRoutes = () => {
  console.log(styles.info, '‚úì V√©rification des routes...');
  const fs = require('fs');
  const path = require('path');

  try {
    const routesDir = path.join(__dirname, 'app', 'routes');
    const routeFiles = fs.readdirSync(routesDir);

    console.log('  Routes disponibles:');
    routeFiles.forEach((file) => {
      console.log(`    ${file}`);

      // V√©rifier si le fichier de route a un loader
      try {
        const routeContent = fs.readFileSync(path.join(routesDir, file), 'utf8');
        if (routeContent.includes('export const loader')) {
          console.log(styles.success, `      ‚úì Loader trouv√©`);
        } else {
          console.log(styles.warning, `      ‚ö†Ô∏è Aucun loader d√©fini`);
        }
      } catch (e) {
        // Ignorer les erreurs de lecture de fichier
      }
    });
  } catch (error) {
    console.log(styles.error, '‚ùå Erreur lors de la lecture des routes:', error.message);
  }
};

// Ex√©cuter les v√©rifications
checkEnv();
checkVersions();
checkRemixConfig();
checkRoutes();

console.log(styles.title, 'üîç ANALYSE TERMIN√âE');
console.log(
  styles.info,
  'Ex√©cutez "node debug-loader.js" avant de d√©marrer l\'application pour diagnostiquer les probl√®mes',
);

module.exports = {
  fixLoaderIssue: () => {
    // Injection de polyfills et corrections pour les probl√®mes de loader
    if (typeof global !== 'undefined') {
      if (!global.__remix_loader_stack) {
        global.__remix_loader_stack = [];
        console.log(styles.success, '‚úì Global __remix_loader_stack polyfill install√©');
      }
    }
  },
};

// Si ce fichier est ex√©cut√© directement
if (require.main === module) {
  console.log(styles.info, 'Ex√©cution des correctifs automatiques...');
  module.exports.fixLoaderIssue();
}
